<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lcof06</title>
    <link href="/2020/10/29/lcof06/"/>
    <url>/2020/10/29/lcof06/</url>
    
    <content type="html"><![CDATA[<p>剑指offer第六题，难度：简单</p><a id="more"></a><p>题目描述：</p><blockquote><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p></blockquote><p>一开始想到的是用map把遍历到的数据装起来（下标为键，Val为值），然后根据下标倒着装回去。</p><p>我的代码：</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(head *ListNode)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">var</span> ret []<span class="hljs-keyword">int</span>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>)<span class="hljs-keyword">var</span> i, j <span class="hljs-keyword">int</span><span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span>; head != <span class="hljs-literal">nil</span>; head = head.Next &#123;m[i] = head.Vali++&#125;<span class="hljs-keyword">for</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j-- &#123;ret = <span class="hljs-built_in">append</span>(ret, m[j])&#125;<span class="hljs-keyword">return</span> ret&#125;</code></pre><p>看到一个更好的思路，首先用slice的append装起来，然后直接逆转数组，速度比读取map快多了。</p><p>代码：</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(head *ListNode)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;res := []<span class="hljs-keyword">int</span>&#123;&#125;<span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;res = <span class="hljs-built_in">append</span>(res, head.Val)head = head.Next&#125;<span class="hljs-keyword">for</span> i, j := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(res)<span class="hljs-number">-1</span>; i &lt; j; &#123;res[i], res[j] = res[j], res[i]i++j--&#125;<span class="hljs-keyword">return</span> res&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2020/10/27/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2020/10/27/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>leetcode的第一题：两数之和</p><a id="more"></a><p>题目描述：</p><blockquote><p> 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br> 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p></blockquote><p>解题思路：</p><p>创建一个键为数字，值为下标的map，遍历数组，检查map里面有没有这个数相加等于target的数，没有就在map里面加上这个数跟它的下标，有就直接返回这个数的下标跟map里面另一个数的值。</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, target <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>)<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;another := target - nums[i]<span class="hljs-keyword">if</span> _, ok := m[another]; ok &#123;<span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;m[another], i&#125;&#125;m[nums[i]] = i&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;</code></pre><p>时间复杂度应该是O(n)……不知道算得对不对……第一次写题解，可能比较菜</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetgode</title>
    <link href="/2020/10/27/leetgode/"/>
    <url>/2020/10/27/leetgode/</url>
    
    <content type="html"><![CDATA[<p>这是一个汇总的文章，写的我的leetcode题解的目录。</p><a id="more"></a><p>当作是自己的一个总结吧，目前水平还比较低，希望不要嫌弃~</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/26/hello-world/"/>
    <url>/2020/10/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
